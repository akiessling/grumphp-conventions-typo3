<?xml version="1.0"?>
<ruleset name="Custom Standard">
  <config name="installed_paths" value="../../slevomat/coding-standard"/>
  <rule ref="PSR12"/>
  <!-- Add custom rules or tweak PSR-2 here -->
  <rule ref="Generic.Files.LineLength">
    <properties>
      <property name="lineLimit" value="150"/>
      <property name="absoluteLineLimit" value="0"/>
    </properties>
    <exclude-pattern>**/*/Configuration/TCA/*.php</exclude-pattern>
  </rule>

  <!-- Force array element indentation with 4 spaces -->
  <rule ref="Generic.Arrays.ArrayIndent"/>
  <!-- Forbid `array(...)` -->
  <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
  <!-- Forbid duplicate classes -->
  <rule ref="Generic.Classes.DuplicateClassName"/>
  <!-- Forbid empty statements -->
  <rule ref="Generic.CodeAnalysis.EmptyStatement">
    <!-- But allow empty catch -->
    <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
  </rule>
  <!-- Forbid final methods in final classes -->
  <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
  <!-- Forbid useless empty method overrides -->
  <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
  <!-- Forbid inline HTML in PHP code -->
  <rule ref="Generic.Files.InlineHTML"/>
  <!-- Forbid PHP 4 constructors -->
  <rule ref="Generic.NamingConventions.ConstructorName"/>
  <!-- Forbid any content before opening tag -->
  <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
  <!-- Forbid deprecated functions -->
  <rule ref="Generic.PHP.DeprecatedFunctions"/>

  <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
  <rule ref="Generic.PHP.ForbiddenFunctions">
    <properties>
      <property
          name="forbiddenFunctions"
          type="array"
          value="
                    chop => rtrim,
                    close => closedir,
                    compact => null,
                    delete => unset,
                    doubleval => floatval,
                    extract => null,
                    fputs => fwrite,
                    ini_alter => ini_set,
                    is_double => is_float,
                    is_integer => is_int,
                    is_long => is_int,
                    is_null => null,
                    is_real => is_float,
                    is_writeable => is_writable,
                    join => implode,
                    key_exists => array_key_exists,
                    pos => current,
                    settype => null,
                    show_source => highlight_file,
                    sizeof => count,
                    strchr => strstr,
                    var_dump => null,
                    var_export => null
                "/>
    </properties>
  </rule>
  <!-- Forbid useless inline string concatenation -->
  <rule ref="Generic.Strings.UnnecessaryStringConcat">
    <!-- But multiline is useful for readability -->
    <properties>
      <property name="allowMultiline" value="true"/>
    </properties>
  </rule>
  <!-- Forbid backtick operator -->
  <rule ref="Generic.PHP.BacktickOperator"/>
  <!-- Forbid `php_sapi_name()` function -->
  <rule ref="Generic.PHP.SAPIUsage"/>
  <!-- Forbid comments starting with # -->
  <rule ref="PEAR.Commenting.InlineComment"/>
  <!-- Disallow else if in favor of elseif -->
  <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
    <type>error</type>
  </rule>


  <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
  <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
  <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
  <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
  <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
  <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
  <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
  <rule ref="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators"/>
  <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
  <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
  <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
  <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
  <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
  <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
  <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
  <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>
  <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
  <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
  <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
  <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>
  <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
  <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
  <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
  <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
  <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>
  <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
  <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
  <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
  <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>
  <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
  <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
  <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
  <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
  <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
  <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
  <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
  <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
  <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
  <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/>
  <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants"/>
  <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/>
  <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
  <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
  <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
  <!--  should be in next release-->
  <!--  <rule ref="SlevomatCodingStandard.PHP.DisallowReference" />-->

  <!-- only from php 7.1 upwards -->
  <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
  <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
    <properties>
      <property
          name="forbiddenAnnotations"
          type="array"
          value="
                    @api,
                    @author,
                    @category,
                    @copyright,
                    @created,
                    @license,
                    @package,
                    @since,
                    @subpackage,
                    @version
                "
      />
    </properties>
  </rule>
  <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
    <properties>
      <property name="forbiddenCommentPatterns" type="array">
        <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
        <element value="~^Created by .+\.\z~i"/>
        <element value="~^(User|Date|Time): \S+\z~i"/>
        <element value="~^\S+ [gs]etter\.\z~i"/>
        <element value="~^Class \S+\z~i"/>
      </property>
    </properties>
  </rule>
</ruleset>